#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 100

// Structure to store student information
typedef struct {
    int rollNumber;
    char name[50];
    float marks;
} Student;

Student students[MAX_STUDENTS];
int studentCount = 0;

// Function declarations
void addStudent();
void viewStudents();
void editStudent();
void deleteStudent();

int main() {
    int choice;

    do {
        printf("\nStudent Information Management System\n");
        printf("1. Add Student\n");
        printf("2. View Students\n");
        printf("3. Edit Student\n");
        printf("4. Delete Student\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                viewStudents();
                break;
            case 3:
                editStudent();
                break;
            case 4:
                deleteStudent();
                break;
            case 5:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}

// Function to add a student
void addStudent() {
    if (studentCount >= MAX_STUDENTS) {
        printf("Error: Maximum student limit reached.\n");
        return;
    }

    printf("Enter roll number: ");
    scanf("%d", &students[studentCount].rollNumber);
    printf("Enter name: ");
    getchar(); // To consume newline character left by scanf
    fgets(students[studentCount].name, sizeof(students[studentCount].name), stdin);
    strtok(students[studentCount].name, "\n"); // Remove trailing newline character
    printf("Enter marks: ");
    scanf("%f", &students[studentCount].marks);

    studentCount++;
    printf("Student added successfully.\n");
}

// Function to view all students
void viewStudents() {
    if (studentCount == 0) {
        printf("No records to display.\n");
        return;
    }

    printf("\nStudent Records:\n");
    printf("Roll Number\tName\t\tMarks\n");
    for (int i = 0; i < studentCount; i++) {
        printf("%d\t\t%s\t\t%.2f\n", students[i].rollNumber, students[i].name, students[i].marks);
    }
}

// Function to edit a student's record
void editStudent() {
    int rollNumber, found = 0;

    printf("Enter roll number of the student to edit: ");
    scanf("%d", &rollNumber);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].rollNumber == rollNumber) {
            found = 1;
            printf("Editing record for roll number %d\n", rollNumber);
            printf("Enter new name: ");
            getchar(); // To consume newline character
            fgets(students[i].name, sizeof(students[i].name), stdin);
            strtok(students[i].name, "\n"); // Remove trailing newline character
            printf("Enter new marks: ");
            scanf("%f", &students[i].marks);
            printf("Record updated successfully.\n");
            break;
        }
    }

    if (!found) {
        printf("Error: No student found with roll number %d.\n", rollNumber);
    }
}

// Function to delete a student's record
void deleteStudent() {
    int rollNumber, found = 0;

    printf("Enter roll number of the student to delete: ");
    scanf("%d", &rollNumber);

    for (int i = 0; i < studentCount; i++) {
        if (students[i].rollNumber == rollNumber) {
            found = 1;
            for (int j = i; j < studentCount - 1; j++) {
                students[j] = students[j + 1];
            }
            studentCount--;
            printf("Record deleted successfully.\n");
            break;
        }
    }

    if (!found) {
        printf("Error: No student found with roll number %d.\n", rollNumber);
    }
}
